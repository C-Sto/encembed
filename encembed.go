package main

import (
	"crypto/rand"
	"encoding/base64"
	"flag"
	"io"
	"os"
	"text/template"

	"filippo.io/age"
)

type encembedtpl struct {
	PkgName          string
	FuncName         string
	Key              string
	EmbedName        string
	EncryptedVarName string
	DecryptedVarName string
	ExternalKey      string
}

func main() {
	cfg := encembedtpl{}
	infname := flag.String("i", "", "input file")
	flag.StringVar(&cfg.EmbedName, "o", "encembedded", "encrypted output file")
	ofsrcname := flag.String("srcname", "zencembed.go", "source file name to create")
	flag.StringVar(&cfg.FuncName, "funcname", "embedded", "name of function to return decrypted input file")
	flag.StringVar(&cfg.PkgName, "pkgname", "main", "name of package for source file to output")
	flag.StringVar(&cfg.EncryptedVarName, "encvarname", "cryptembed", "variable name for encrypted resource")
	flag.StringVar(&cfg.DecryptedVarName, "decvarname", "", "variable name to use for decrypted resource (if you don't want to access it via the function)")
	flag.StringVar(&cfg.ExternalKey, "extkey", "", "do not embed the key in the binary (writes to specified filename)")
	flag.Parse()

	if cfg.ExternalKey != "" && cfg.DecryptedVarName != "" {
		panic("external key and simple var access incompatible")
	}

	cfg.Key = keyGen()
	inf, err := os.Open(*infname)
	if err != nil {
		panic(err)
	}
	of, err := os.Create(cfg.EmbedName)
	if err != nil {
		panic(err)
	}

	rcpt, err := age.NewScryptRecipient(cfg.Key)
	if err != nil {
		panic(err)
	}
	w, err := age.Encrypt(of, rcpt)
	if err != nil {
		panic(err)
	}
	io.Copy(w, inf)
	w.Close()

	srcf, err := os.Create(*ofsrcname)
	if err != nil {
		panic(err)
	}

	tmp, err := template.New("encthing").Parse(tpl)
	if err != nil {
		panic(err)
	}
	err = tmp.Execute(srcf, cfg)
	if err != nil {
		panic(err)
	}
	srcf.Close()
	if cfg.ExternalKey != "" {
		kf, err := os.Create(cfg.ExternalKey)
		if err != nil {
			panic(err)
		}
		kf.WriteString(cfg.Key)
		kf.Close()
	}

}

const tpl = `// Code generated by 'go generate'; DO NOT EDIT.
package {{.PkgName}}

import(
	"filippo.io/age"
	"io"
	_ "embed"
	"bytes"
)

//go:embed {{.EmbedName}}
var {{.EncryptedVarName}} []byte
func {{.FuncName}}({{if .ExternalKey}}key string{{end}}) []byte {
	i, _ := age.NewScryptIdentity({{if .ExternalKey}}key{{else}}"{{.Key}}"{{end}})
	r, _ := age.Decrypt(bytes.NewReader({{.EncryptedVarName}}), i)
	a, _ := io.ReadAll(r)
	return a
}
{{if .DecryptedVarName}}var {{.DecryptedVarName}} = {{.FuncName}}() {{end}}
`

func keyGen() string {
	//base64 key
	keybytes := make([]byte, 32)
	rand.Read(keybytes)
	return base64.RawStdEncoding.EncodeToString(keybytes)
}
